{"version":3,"sources":["components/Global.js","components/Home.js","components/NotFound.js","components/Header.js","components/CountryCard.js","components/Countries.js","components/CountryPage.js","App.js","serviceWorker.js","index.js"],"names":["PageContainer","styled","div","Message","h1","LoadingImg","Title","Home","NotFound","NavContainer","MainNav","nav","StyledLink","Link","AnimationDiv","Header","props","to","className","activelink","CountryName","CountryContinent","CountryInfoCard","CountryFlag","CountryMoreInfo","CountryLang","Label","span","CountryCard","Fragment","csscode","name","continent","langs","map","language","native","join","CountriesGrid","section","SingleCountry","GET_COUNTRIES","gql","Countries","useQuery","loading","error","allcountries","data","countries","message","country","i","key","code","toLowerCase","languages","CoutryPageCard","Currency","h3","AreaCode","Labels","h2","CountryPageContainer","CountryPage","match","params","thiscountry","COUNTRY_FLAG","currency","phone","client","ApolloClient","uri","App","path","render","exact","component","Boolean","window","location","hostname","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.d53e313e.chunk.js","sourcesContent":["import styled from 'styled-components';\r\n\r\nconst PageContainer = styled.div`    \r\n    justify-content: center;\r\n    display: flex;\r\n    flex-direction: column;\r\n    padding: 4em;\r\n    flex:1;\r\n    background: rgb(37,49,61);\r\n    background: -moz-linear-gradient(180deg, rgba(37,49,61,1) 0%, rgba(38,53,69,1) 100%);\r\n    background: -webkit-linear-gradient(180deg, rgba(37,49,61,1) 0%, rgba(38,53,69,1) 100%);\r\n    background: linear-gradient(180deg, rgba(37,49,61,1) 0%, rgba(38,53,69,1) 100%);\r\n    filter: progid:DXImageTransform.Microsoft.gradient(startColorstr=\"#25313d\",endColorstr=\"#263545\",GradientType=1);\r\n`;\r\n\r\nconst Message = styled.h1`\r\n    text-align:center;\r\n    color:#8797a9;\r\n    font-family: sans-serif;\r\n    text-transform:Uppercase;\r\n    font-size:2rem;\r\n`;\r\n\r\n\r\nconst LoadingImg = styled.div`\r\n    margin: 0px auto;\r\n    border-radius: 50%;\r\n    border-top:4px solid #465c73;\r\n    width:50px;\r\n    height: 50px;\r\n    animation: 1.64s loading infinite linear;\r\n    transform: translate(-50%, -50%)\r\n`;\r\n\r\nexport { PageContainer, Message, LoadingImg };","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport { PageContainer } from './Global';\r\n\r\nconst Title = styled.h1`\r\n  font-family: \"Lobster Two\", cursive;\r\n  font-size: 4.5rem;\r\n  text-align: center;\r\n  color: #ffffff;\r\n`;\r\n\r\nconst Home = () =>{\r\n    return(\r\n        <PageContainer>\r\n            <Title>Welcome<br />And Have Fun!</Title>\r\n        </PageContainer>\r\n    )\r\n}\r\n\r\nexport default Home;","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport { PageContainer } from './Global';\r\n\r\nconst Title = styled.h1`\r\n  font-family: \"Lobster Two\", cursive;\r\n  font-size: 3rem;\r\n  text-align: center;\r\n  color: #ffffff;\r\n`;\r\n\r\nconst NotFound = () =>{\r\n    return(\r\n        <PageContainer>\r\n            <Title>Page Not Found!</Title>\r\n        </PageContainer>\r\n    )\r\n}\r\n\r\nexport default NotFound;","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport styled from 'styled-components';\r\n\r\nconst NavContainer = styled.div`\r\n  position:fixed;\r\n  top:0;\r\n  left:0;\r\n  width:100%;\r\n  background:#2c3e50;\r\n`;\r\n\r\nconst MainNav = styled.nav`\r\n  margin: 25px auto;\r\n  position: relative;\r\n  width: 590px;\r\n  max-width:85%;\r\n  background-color: #34495e;\r\n  border-radius: 8px;\r\n  font-size: 0;\r\n`;\r\n\r\nconst StyledLink = styled(Link)`\r\n  line-height: 50px;\r\n  height: 100%;\r\n  font-size: 15px;\r\n  display: inline-block;\r\n  position: relative;\r\n  z-index: 1;\r\n  text-decoration: none;\r\n  text-transform: uppercase;\r\n  text-align: center;\r\n  color: white;\r\n  cursor: pointer;\r\n  width:50%;\r\n`;\r\n\r\nconst AnimationDiv = styled.div`\r\n  position: absolute;\r\n  height: 100%;\r\n  top: 0;\r\n  z-index: 0;\r\n  transition: all .5s ease 0s;\r\n  border-radius: 8px;\r\n`;\r\n\r\nconst Header = (props) => {\r\n  return (\r\n    <NavContainer>\r\n      <MainNav>\r\n        <StyledLink to=\"/\">Home</StyledLink>\r\n        <StyledLink to=\"/countries\">Countries</StyledLink>\r\n        <AnimationDiv className={`animation ${props.activelink}`}></AnimationDiv>\r\n      </MainNav>\r\n    </NavContainer>\r\n  )\r\n}\r\n\r\nexport default Header;","import React from 'react';\r\nimport styled from 'styled-components';\r\n\r\nconst CountryName = styled.div`\r\n    text-align:center;\r\n    color:#fff;\r\n    font-weight:bold;\r\n    font-size:1rem;\r\n    width: calc( 100% - 116px );\r\n`;\r\n\r\nconst CountryContinent = styled.div`\r\n    color:#fff;\r\n    margin:0 0 10px 0;\r\n`;\r\n\r\nconst CountryInfoCard = styled.div`\r\n    display: flex;\r\n    flex-direction: row;\r\n    align-items: center;\r\n    width: calc( 100% - 2rem );\r\n    height: 80px;\r\n    clear: both;\r\n    margin: 1rem;\r\n    background:#18293a;\r\n    border-radius: 4px 4px 0 0;\r\n    cursor: pointer;\r\n    @media(min-width: 768px) {\r\n        width: calc( 100% - 1rem );\r\n        margin: 1rem 0 1rem 1rem;\r\n    }\r\n`;\r\n\r\nconst CountryFlag = styled.div`\r\n    margin: 1rem;\r\n    height: 48px;\r\n    width: 64px;\r\n    border-radius: 3px;\r\n    box-shadow: 0 2px 1px #060e2a;\r\n`;\r\n\r\nconst CountryMoreInfo = styled.div`\r\n    margin: 1rem;\r\n    margin-top: -1rem;\r\n    padding: 1rem;\r\n    background: #3b4957;\r\n    border-radius: 0 0 4px 4px;\r\n    @media(min-width: 768px) {\r\n        margin: -1rem 0 1rem 1rem;\r\n    }\r\n`;\r\n\r\nconst CountryLang = styled.div`\r\n    color:#fff;\r\n    line-height:1.2rem;\r\n`;\r\n\r\nconst Label = styled.span`\r\n    color:#060e15;\r\n    font-weight:bold;\r\n    margin-right:10px;\r\n`;\r\n\r\nconst CountryCard = (props) => {\r\n    return(\r\n        <React.Fragment>\r\n            <CountryInfoCard>\r\n                <CountryFlag className={`flag-icon-background flag-icon-${props.csscode}`} />\r\n                <CountryName>{props.name}</CountryName>\r\n            </CountryInfoCard>\r\n            <CountryMoreInfo>\r\n                <CountryContinent>\r\n                    <Label>{`Continent: `}</Label>{props.continent}\r\n                </CountryContinent>\r\n                <CountryLang>\r\n                    <Label>{`Languages:`}</Label>{`${props.langs.map(language => (\r\n                        `${language.name}(${language.native})`\r\n                    )).join(' - ')}`}\r\n                </CountryLang>\r\n            </CountryMoreInfo>\r\n        </React.Fragment>\r\n    )\r\n}\r\n\r\nexport default CountryCard;","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { useQuery } from '@apollo/react-hooks';\r\nimport { gql } from 'apollo-boost';\r\nimport styled from 'styled-components';\r\nimport \"../../node_modules/flag-icon-css/css/flag-icon.min.css\"\r\nimport { PageContainer, Message, LoadingImg } from './Global';\r\nimport CountryCard from './CountryCard';\r\n\r\n\r\nconst CountriesGrid = styled.section`\r\n  @media(min-width: 768px) {\r\n      width: calc(100% - 1rem);\r\n      flex-wrap: wrap;\r\n      display: flex;\r\n      justify-content: space-between;\r\n  }\r\n`;\r\n\r\nconst SingleCountry = styled(Link)`\r\n    text-decoration:none;\r\n    @media(min-width: 768px) {\r\n        width: 33%;\r\n    }\r\n`;\r\n\r\nconst GET_COUNTRIES = gql`\r\n    {\r\n        countries {\r\n            name\r\n            code\r\n            continent {\r\n                name\r\n            }\r\n            languages {\r\n                code\r\n                native\r\n                name\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\n\r\nconst Countries = () => {\r\n    const { loading, error, data } = useQuery(GET_COUNTRIES);\r\n    const allcountries = data.countries;\r\n    if (loading) return (<PageContainer><LoadingImg /><Message><br />Loading</Message></PageContainer>) ;\r\n    if (error) return (<PageContainer><Message><br />{`Error! ${error.message}`}</Message></PageContainer>);\r\n    return (\r\n        <React.Fragment>\r\n            <CountriesGrid>\r\n                {\r\n                    allcountries.map( (country, i) => (\r\n                        <SingleCountry key={i} to={`/countries/${country.code}`}>\r\n                            <CountryCard \r\n                                csscode={country.code.toLowerCase()} \r\n                                name={`${country.name}`}\r\n                                continent={`${country.continent.name}`}\r\n                                langs={country.languages}\r\n                            />\r\n                        </SingleCountry>\r\n                    ))\r\n                }\r\n            </CountriesGrid>\r\n        </React.Fragment>\r\n    )\r\n}\r\n\r\nexport default Countries;","import React from 'react';\r\nimport { useQuery } from '@apollo/react-hooks';\r\nimport { gql } from 'apollo-boost';\r\nimport styled from 'styled-components';\r\nimport { PageContainer, Message, LoadingImg } from './Global';\r\nimport Header from './Header';\r\n\r\nconst CountryFlag = styled.div`\r\n    margin: 1rem auto;\r\n    height: 48px;\r\n    width: 64px;\r\n    border-radius: 3px;\r\n    box-shadow: 0 2px 1px #060e2a;\r\n`;\r\n\r\nconst CoutryPageCard = styled.div`\r\n    background: #2c3e50;\r\n    border-radius: 4px 4px 0 0;\r\n    padding: 2rem;\r\n`;\r\n\r\nconst CountryName = styled.h1`\r\n    font-size:4rem; \r\n    text-align:center;\r\n    margin-bottom:1rem;\r\n    color:#fff;\r\n    @media(max-width: 767px) {\r\n        font-size:2rem; \r\n    }    \r\n`;\r\nconst Currency = styled.h3`\r\n    font-size:2rem; \r\n    text-align:center;\r\n    margin-bottom:1rem;\r\n    color:#637a92;\r\n`;\r\nconst AreaCode = styled.h3`\r\n    font-size:2rem; \r\n    text-align:center;\r\n    margin-bottom:1rem;\r\n    color:#637a92;\r\n`;\r\nconst Labels = styled.h2`\r\n    text-align:center;\r\n    color: #060e15;\r\n    font-weight: bold;\r\n`;\r\n\r\nconst CountryPageContainer = styled(PageContainer)`\r\n    align-items: center;\r\n    padding-top:50px;\r\n`;\r\n\r\nconst CountryPage = ({ match }) => {\r\n    const { loading, error, data } = useQuery(gql`\r\n        {\r\n            country(code: \"${match.params.code}\") {\r\n                name\r\n                code\r\n                phone\r\n                currency\r\n            }\r\n        }\r\n    `);\r\n    const thiscountry = data.country;\r\n    const COUNTRY_FLAG = match.params.code;\r\n    if (loading) return (<PageContainer><LoadingImg /><Message><br />Loading</Message></PageContainer>) ;\r\n    if (error) return (<PageContainer><Message><br />{`Error! ${error.message}`}</Message></PageContainer>);\r\n    return(\r\n        <CountryPageContainer>\r\n            <Header />\r\n            <CoutryPageCard>\r\n                <CountryFlag className={`flag-icon-background flag-icon-${COUNTRY_FLAG.toLowerCase()}`}/>\r\n                <CountryName>{thiscountry.name}</CountryName>\r\n                <Labels>Currency:</Labels>\r\n                <Currency>{thiscountry.currency}</Currency>\r\n                <Labels>Area Phone Code:</Labels>\r\n                <AreaCode>{`+${thiscountry.phone}`}</AreaCode>\r\n            </CoutryPageCard>\r\n        </CountryPageContainer>\r\n    )\r\n}\r\n\r\n\r\nexport default CountryPage","import React from 'react';\r\nimport { BrowserRouter, Route, Switch } from 'react-router-dom';\r\nimport ApolloClient from 'apollo-boost';\r\nimport { ApolloProvider } from '@apollo/react-hooks';\r\nimport './App.scss';\r\nimport Home from './components/Home';\r\nimport NotFound from './components/NotFound';\r\nimport Header from './components/Header';\r\nimport Countries from './components/Countries';\r\nimport CountryPage from './components/CountryPage';\r\n\r\nconst client = new ApolloClient({\r\n  uri: 'https://countries.trevorblades.com'\r\n});\r\n\r\nconst App = () => {\r\n  return (\r\n    <BrowserRouter>\r\n      <ApolloProvider client={client}>\r\n        <Switch>\r\n          <Route \r\n            path='/' \r\n            render={(props) => <React.Fragment><Header {...props} activelink='activehome' /><Home /></React.Fragment>} \r\n            exact\r\n          />\r\n          <Route path='/countries/:code' component={CountryPage} />\r\n          <Route \r\n            path='/countries' \r\n            render={(props) => <React.Fragment><Header {...props} activelink='activecountries' /><Countries /></React.Fragment>} \r\n          /> \r\n          <Route render={(props) => <React.Fragment><Header {...props} activelink='' /><NotFound /></React.Fragment>} />\r\n        </Switch>\r\n      </ApolloProvider>\r\n    </BrowserRouter>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}